<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Spatie\Multitenancy\Facades\Tenancy;
use Symfony\Component\HttpFoundation\Response;
use Throwable;

class EnsureTenantConnection
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        // O middleware 'NeedsTenant' j√° deve ter sido executado.
        // Verificamos se o tenant atual foi definido com sucesso.
        if (! Tenancy::current()) {
            // Este cen√°rio n√£o deveria acontecer se o middleware estiver na ordem correta,
            // mas √© uma prote√ß√£o extra. Indica um problema de configura√ß√£o.
            abort(500, 'O contexto do tenant √© necess√°rio, mas n√£o foi encontrado.');
        }

        try {
            // O pacote da Spatie troca a conex√£o PADR√ÉO dinamicamente.
            // Ent√£o, testamos a conex√£o padr√£o, que neste ponto DEVE ser a do tenant.
            // O 'getPdo()' for√ßa uma conex√£o real.
            DB::connection('tenant')->getPdo();

        } catch (Throwable $e) {
            // Se a conex√£o falhar (timeout, credenciais erradas, etc.),
            // logamos o erro e interrompemos a requisi√ß√£o com um erro 503.
            // ISSO √â O QUE IMPEDE O FALLBACK PARA A CONEX√ÉO LANDLORD! üõ°Ô∏è
            report($e);
            abort(503, 'Servi√ßo temporariamente indispon√≠vel devido a um problema na conex√£o com o banco de dados.');
        }

        return $next($request);
    }
}
